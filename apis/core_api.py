# coding: utf-8

"""
CoreApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CoreApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_bankcode(self, currency, **kwargs):
        """
        Get Bank code
        This endpoint provides a list of the banks and mobile money wallet providers with information like name, code and the list of branches and branch codes per bank based on a specified currency.\n\nThe **code** field in the below sample refers to the bank code for your bank account or the code of your mobile money provider. \n\n```json\n{\n {\n   \"id\": 147,\n   \"code\": \"GH010100\",\n   \"name\": \"BANK OF GHANA\",\n   \"isMobileVerified\": null,\n   \"branches\": [\n      {\n        \"id\": 1,\n        \"branchCode\": \"GH010101\",\n        \"branchName\": \"BANK OF GHANA-ACCRA\",\n        \"swiftCode\": \"BAGHGHAC\",\n        \"bic\": \"BAGHGHAC\"\n       }]\n },\n {\n  \"id\": 79,\n  \"code\": \"AIRTEL\",\n  \"name\": \"Airtel\",\n  \"isMobileVerified\": true,\n  \"branches\": null\n }\n}\n```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_bankcode(currency, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str currency: e.g NGN, GHS, KES (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bankcode" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'currency' is set
        if ('currency' not in params) or (params['currency'] is None):
            raise ValueError("Missing the required parameter `currency` when calling `get_bankcode`")

        resource_path = '/core/banks'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'currency' in params:
            query_params['currency'] = params['currency']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def getbranch_code(self, bank_id, **kwargs):
        """
        Get branch Code
        This endpoint provides a list of the branches for a bank and helps you get your branch code. To get a branch Code: \n+ Make a request to the endpoint that provides bank code with your desired currency \n+ Find your bank in the list returned.\n+ Check the id field of your bank information for your branch\n+ use the id field to make a request to this endpoint to get the list of branches for your bank\n+ Check the **branchCode** field of your branch information for the value of your branch code

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getbranch_code(bank_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str bank_id: Id of the bank (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bank_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getbranch_code" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'bank_id' is set
        if ('bank_id' not in params) or (params['bank_id'] is None):
            raise ValueError("Missing the required parameter `bank_id` when calling `getbranch_code`")

        resource_path = '/core/banks/{bankId}/branches'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'bank_id' in params:
            path_params['bankId'] = params['bank_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def getadisbursementtransactionbycustomerreference(self, business, customer_reference, **kwargs):
        """
        Get a disbursement transaction by customer reference
        This endpoint provides the details of a disbursement transaction through the use of a customer reference.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getadisbursementtransactionbycustomerreference(business, customer_reference, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business: The ID of the business (required)
        :param str customer_reference: The reference of the customer/merchant (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business', 'customer_reference']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getadisbursementtransactionbycustomerreference" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business' is set
        if ('business' not in params) or (params['business'] is None):
            raise ValueError("Missing the required parameter `business` when calling `getadisbursementtransactionbycustomerreference`")
        # verify the required parameter 'customer_reference' is set
        if ('customer_reference' not in params) or (params['customer_reference'] is None):
            raise ValueError("Missing the required parameter `customer_reference` when calling `getadisbursementtransactionbycustomerreference`")

        resource_path = '/core/transactions/disbursements/by-customer-reference'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'business' in params:
            query_params['business'] = params['business']
        if 'customer_reference' in params:
            query_params['customerReference'] = params['customer_reference']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def getadisbursementtransactionbyreference(self, business, reference, **kwargs):
        """
        Get a disbursement transaction by reference
        This endpoint provides the details of a disbursement transaction through the use of its reference.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getadisbursementtransactionbyreference(business, reference, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business: The ID of business (required)
        :param str reference: The reference of the transaction (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business', 'reference']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getadisbursementtransactionbyreference" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business' is set
        if ('business' not in params) or (params['business'] is None):
            raise ValueError("Missing the required parameter `business` when calling `getadisbursementtransactionbyreference`")
        # verify the required parameter 'reference' is set
        if ('reference' not in params) or (params['reference'] is None):
            raise ValueError("Missing the required parameter `reference` when calling `getadisbursementtransactionbyreference`")

        resource_path = '/core/transactions/disbursements/by-reference'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'business' in params:
            query_params['business'] = params['business']
        if 'reference' in params:
            query_params['reference'] = params['reference']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def getthetransactionsfora_business(self, business_id, **kwargs):
        """
        Get the transactions for a Business
        This endpoint provides a list of all the transactions for a business.\n\n\nREQUEST BODY\n\n\n| Field | Data Type | Description |\n|------| ------------- | ----------- |\n| page | string | Specify exactly what page you want to retrieve optional|\n| perPage | string | Specify how many records you want to retrieve per page optional|\n| from | string| Specify start date with format \"YYYY-mm-dd\"  optional|\n| to | string| Specify end date with format \"YYYY-mm-dd\" optional|

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getthetransactionsfora_business(business_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business_id: This could be the ID of the business or the ID of a sub-account of the business (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getthetransactionsfora_business" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business_id' is set
        if ('business_id' not in params) or (params['business_id'] is None):
            raise ValueError("Missing the required parameter `business_id` when calling `getthetransactionsfora_business`")

        resource_path = '/core/transactions/search/business/{businessID}'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'business_id' in params:
            path_params['businessID'] = params['business_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def getthetransactionsforthesub_accountsofabusiness(self, business_id, **kwargs):
        """
        Get the transactions for the sub-accounts of a Business
        This provides a list of all the transactions for the sub-accounts of a Business.\n\n\nREQUEST BODY\n\n\n| Field | Data Type | Description |\n|------| ------------- | ----------- |\n| page | string | Specify exactly what page you want to retrieve optional|\n| perPage | string | Specify how many records you want to retrieve per page optional|\n| from | string| Specify start date with format \"YYYY-mm-dd\"  optional|\n| to | string| Specify end date with format \"YYYY-mm-dd\" optional|

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getthetransactionsforthesub_accountsofabusiness(business_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business_id: The is the ID of a business (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getthetransactionsforthesub_accountsofabusiness" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business_id' is set
        if ('business_id' not in params) or (params['business_id'] is None):
            raise ValueError("Missing the required parameter `business_id` when calling `getthetransactionsforthesub_accountsofabusiness`")

        resource_path = '/core/transactions/search/business/{businessID}/sub-accounts'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'business_id' in params:
            path_params['businessID'] = params['business_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def getatransactionforabusiness(self, transaction_id, **kwargs):
        """
        Get a transaction for a business
        This endpoint provides the details of a transaction through the use of its ID.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getatransactionforabusiness(transaction_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str transaction_id: The reference or ID of the transaction (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getatransactionforabusiness" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params) or (params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `getatransactionforabusiness`")

        resource_path = '/core/transactions/{transactionID}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'transaction_id' in params:
            path_params['transactionID'] = params['transaction_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
