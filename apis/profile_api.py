# coding: utf-8

"""
ProfileApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ProfileApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def getthe_beneficiariesforabusiness(self, business_id, **kwargs):
        """
        Get the Beneficiaries for a business
        This endpoint provides the ability to retrieve a list of beneficiaries attached to a business. \n\n\nREQUEST BODY\n\n\n| Field | Data Type | Description |\n|------| ------------- | ----------- |\n| page | string | Specify exactly what page you want to retrieve optional|\n| perPage | string | Specify how many records you want to retrieve per page optional|

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getthe_beneficiariesforabusiness(business_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business_id: This could be the ID of the business or the ID of a sub-account of the business (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getthe_beneficiariesforabusiness" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business_id' is set
        if ('business_id' not in params) or (params['business_id'] is None):
            raise ValueError("Missing the required parameter `business_id` when calling `getthe_beneficiariesforabusiness`")

        resource_path = '/profile/beneficiaries/business/{businessID}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'business_id' in params:
            path_params['businessID'] = params['business_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def createa_beneficiary(self, business_id, **kwargs):
        """
        Create a Beneficiary
        This endpoint is used for creating a Beneficiary.  \n\n\n\n\nREQUEST BODY\n\n\n| Field | Data Type | Description |\n|------| ------------- | ----------- |\n| firstName | string | required|\n| lastName | string | optional|\n| email | string |The email address of Beneficiary. required |\n| phoneNumber | string | optional  |\n| accountHolderName | string | required|\n| bank | object | see the information about this below. optional + name: bank name required  + code optional   + sortCode optional   + swiftCode optional  + branch  optional   + address: see the definition in address field below optional   |\n| type | string | The value for this field is either _corporate_ or _indivdual_required|\n| address | object | the physical address of the beneficiary and it comprises of the below: optional + country optional  + state optional   + zip required   + city required  + street  required  |\n| currency | string | The currency that Beneficiary would be paid in required|\n| paymentDestination | string | The value for this field is either _mobile_money_wallet_ or _bank_account_ required |\n| destinationAddress | string | see the definition belowrequired |\n| uniqueIdentifier | string | optional |\n\n\nValue Description for the destinationAddress field\n\n\nThe table below show that a destination address should be when given a certain payment destination.\n\n| paymentDestination | destinationAddress |\n|------| ------------- |\n| _mobile_money_wallet_ | phone number used for the wallet |\n| _bank_account_ | account number |

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.createa_beneficiary(business_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business_id: businessID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method createa_beneficiary" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business_id' is set
        if ('business_id' not in params) or (params['business_id'] is None):
            raise ValueError("Missing the required parameter `business_id` when calling `createa_beneficiary`")

        resource_path = '/profile/beneficiaries/business/{businessID}'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'business_id' in params:
            path_params['businessID'] = params['business_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def geta_beneficiary(self, business_id, beneficiary_id, **kwargs):
        """
        Get a Beneficiary
        This endpoint is used for retrieving a single beneficiary attached to a business.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.geta_beneficiary(business_id, beneficiary_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business_id: This could be the ID of the business or the ID of a sub-account of the business (required)
        :param str beneficiary_id: The reference or ID of the beneficiary (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id', 'beneficiary_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method geta_beneficiary" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business_id' is set
        if ('business_id' not in params) or (params['business_id'] is None):
            raise ValueError("Missing the required parameter `business_id` when calling `geta_beneficiary`")
        # verify the required parameter 'beneficiary_id' is set
        if ('beneficiary_id' not in params) or (params['beneficiary_id'] is None):
            raise ValueError("Missing the required parameter `beneficiary_id` when calling `geta_beneficiary`")

        resource_path = '/profile/beneficiaries/business/{businessID}/{beneficiaryID}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'business_id' in params:
            path_params['businessID'] = params['business_id']
        if 'beneficiary_id' in params:
            path_params['beneficiaryID'] = params['beneficiary_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def deletea_beneficiary(self, business_id, beneficiary_id, **kwargs):
        """
        Delete a Beneficiary
        This endpoint is used for deleting a beneficiary.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletea_beneficiary(business_id, beneficiary_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business_id: This could be the ID of the business or the ID of a sub-account of the business (required)
        :param str beneficiary_id: This is the beneficiary ID of the the benficiary (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id', 'beneficiary_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletea_beneficiary" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business_id' is set
        if ('business_id' not in params) or (params['business_id'] is None):
            raise ValueError("Missing the required parameter `business_id` when calling `deletea_beneficiary`")
        # verify the required parameter 'beneficiary_id' is set
        if ('beneficiary_id' not in params) or (params['beneficiary_id'] is None):
            raise ValueError("Missing the required parameter `beneficiary_id` when calling `deletea_beneficiary`")

        resource_path = '/profile/beneficiaries/business/{businessID}/{beneficiaryID}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'business_id' in params:
            path_params['businessID'] = params['business_id']
        if 'beneficiary_id' in params:
            path_params['beneficiaryID'] = params['beneficiary_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def updatea_beneficiary(self, business_id, beneficiary_id, **kwargs):
        """
        Update a Beneficiary
        This endpoint is used for updating the information for a beneficiary. \n\n\n\nREQUEST BODY\n\n\n| Field | Data Type | Description |\n|------| ------------- | ----------- |\n| firstName | string | required|\n| lastName | string | optional|\n| email | string |The email address of Beneficiary. required |\n| phoneNumber | string | optional  |\n| accountHolderName | string | optional|\n| bank | object | see the information about this below. optional + name: bank name required  + code optional   + sortCode optional   + swiftCode optional  + branch  optional   + address: see the definition in address field below optional   |\n| type | string | The value for this field is either _corporate_ or _indivdual_required|\n| address | object | the physical address of the beneficiary and it comprises of the below: optional + country optional  + state optional   + zip required   + city required  + street  required  |\n| currency | string | The currency that Beneficiary would be paid in required|\n| paymentDestination | string | The value for this field is either _mobile_money_wallet_ or _bank_account_ required |\n| destinationAddress | string | see the definition belowrequired |\n| uniqueIdentifier | string | optional |\n\n\n\nValue Description for the destinationAddress field\n\nThe table below show that a destination address should be when given a certain payment destination.\n\n| paymentDestination | destinationAddress |\n|------| ------------- |\n| _mobile_money_wallet_ | phone number used for the wallet |\n| _bank_account_ | account number |

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.updatea_beneficiary(business_id, beneficiary_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business_id: This could be the ID of the business or the ID of a sub-account of the business (required)
        :param str beneficiary_id: The reference or ID of the beneficiary (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id', 'beneficiary_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updatea_beneficiary" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business_id' is set
        if ('business_id' not in params) or (params['business_id'] is None):
            raise ValueError("Missing the required parameter `business_id` when calling `updatea_beneficiary`")
        # verify the required parameter 'beneficiary_id' is set
        if ('beneficiary_id' not in params) or (params['beneficiary_id'] is None):
            raise ValueError("Missing the required parameter `beneficiary_id` when calling `updatea_beneficiary`")

        resource_path = '/profile/beneficiaries/business/{businessID}/{beneficiaryID}'.replace('{format}', 'json')
        method = 'PATCH'

        path_params = {}
        if 'business_id' in params:
            path_params['businessID'] = params['business_id']
        if 'beneficiary_id' in params:
            path_params['beneficiaryID'] = params['beneficiary_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def getbusiness_information(self, **kwargs):
        """
        Get business Information
        This endpoint is used for getting the information on the registered Merchant's business.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getbusiness_information(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getbusiness_information" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/profile/business/me'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_all_sub_accounts(self, business_id, **kwargs):
        """
        Get  All Sub-accounts
        This endpoint is used to retrieve all subaccounts for a business.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_sub_accounts(business_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business_id: The ID of the business (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_sub_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business_id' is set
        if ('business_id' not in params) or (params['business_id'] is None):
            raise ValueError("Missing the required parameter `business_id` when calling `get_all_sub_accounts`")

        resource_path = '/profile/business/{businessId}/sub-accounts'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'business_id' in params:
            path_params['businessId'] = params['business_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_subaccount(self, business_id, **kwargs):
        """
        Create Subaccount
        This endpoint helps you create a sub-account.\n\nREQUEST BODY\n\n\n| Field | Data Type | description |\n|------| ------------- | ----------- |\n| name | string | Customer's name|\n| email | string | Customer's email |\n| mobile | string | Customer's phone number |\n| country | string | Customer's country e.g NG  |

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_subaccount(business_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business_id: The ID of the business (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subaccount" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business_id' is set
        if ('business_id' not in params) or (params['business_id'] is None):
            raise ValueError("Missing the required parameter `business_id` when calling `create_subaccount`")

        resource_path = '/profile/business/{businessId}/sub-accounts'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'business_id' in params:
            path_params['businessId'] = params['business_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_one_subaccount(self, business_id, sub_account_id, **kwargs):
        """
        Get  One Subaccount
        This endpoint is used in retrieving one subaccount.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_one_subaccount(business_id, sub_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business_id: The ID of the business (required)
        :param str sub_account_id: The ID of the subaccount (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id', 'sub_account_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_one_subaccount" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business_id' is set
        if ('business_id' not in params) or (params['business_id'] is None):
            raise ValueError("Missing the required parameter `business_id` when calling `get_one_subaccount`")
        # verify the required parameter 'sub_account_id' is set
        if ('sub_account_id' not in params) or (params['sub_account_id'] is None):
            raise ValueError("Missing the required parameter `sub_account_id` when calling `get_one_subaccount`")

        resource_path = '/profile/business/{businessId}/sub-accounts/{subAccountId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'business_id' in params:
            path_params['businessId'] = params['business_id']
        if 'sub_account_id' in params:
            path_params['subAccountId'] = params['sub_account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_a_subaccount(self, business_id, sub_account_id, **kwargs):
        """
        Update A Subaccount
        This endpoint is used to update a subaccount.\n\nREQUEST BODY\n\n\n| Field | Data Type | description |\n|------| ------------- | ----------- |\n| name | string | Customer's name required|\n| email | string | Customer's email  required|\n| mobile | string | Customer's phone number  required|

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_a_subaccount(business_id, sub_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business_id: The ID of the business (required)
        :param str sub_account_id: The ID of the subaccount (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id', 'sub_account_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_a_subaccount" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business_id' is set
        if ('business_id' not in params) or (params['business_id'] is None):
            raise ValueError("Missing the required parameter `business_id` when calling `update_a_subaccount`")
        # verify the required parameter 'sub_account_id' is set
        if ('sub_account_id' not in params) or (params['sub_account_id'] is None):
            raise ValueError("Missing the required parameter `sub_account_id` when calling `update_a_subaccount`")

        resource_path = '/profile/business/{businessId}/sub-accounts/{subAccountId}'.replace('{format}', 'json')
        method = 'PATCH'

        path_params = {}
        if 'business_id' in params:
            path_params['businessId'] = params['business_id']
        if 'sub_account_id' in params:
            path_params['subAccountId'] = params['sub_account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def fetch_merchant_virtual_accounts(self, **kwargs):
        """
        Fetch Merchant Virtual Accounts
        This endpoint fetches all virtual accounts belonging to a merchant\n\nREQUEST BODY\n\n* * *\n\n| Field | Data Type | Description |\n| --- | --- | --- |\n| page | string | Specify exactly what page you want to retrieve `required` |\n| perPage | string | Specify how many records you want to retrieve per page `required` |\n| filterBy | object | see note below `optional` |\n\nThe filterBy property is an object with the following attributes below that helps you filter accounts:\n\n*   status - `pending`, `approved` or `declined`\n*   currency - EUR or GBP\n*   accountType - corporate or individual

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.fetch_merchant_virtual_accounts(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_merchant_virtual_accounts" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/profile/virtual-accounts'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_subaccount_virtual_accounts(self, business_id, **kwargs):
        """
        Get   Subaccount  Virtual Accounts
        This endpoint is used for retrieving the virtual accounts of your Subaccounts.\n\nREQUEST BODY\n\n* * *\n\n| Field | Data Type | Description |\n| --- | --- | --- |\n| page | string | Specify exactly what page you want to retrieve `required` |\n| perPage | string | Specify how many records you want to retrieve per page `required` |\n| filterBy | object | see note below `optional` |\n\nThe filterBy property is an object with the following attributes below that helps you filter accounts:\n\n*   status - `pending`, `approved` or `declined`\n*   currency - EUR or GBP\n*   accountType - corporate or individual

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subaccount_virtual_accounts(business_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business_id: The ID of the business (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subaccount_virtual_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business_id' is set
        if ('business_id' not in params) or (params['business_id'] is None):
            raise ValueError("Missing the required parameter `business_id` when calling `get_subaccount_virtual_accounts`")

        resource_path = '/profile/virtual-accounts/business/{businessId}/sub-accounts'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'business_id' in params:
            path_params['businessId'] = params['business_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def request_an_eu_rvirtual_account_for_a_subaccount(self, business_id, sub_account_id, **kwargs):
        """
        Request An EUR virtual Account  For A Subaccount
        This endpoint is used for creating a virtual account for your customer/customers\n\n**Note**  \nThe first name and last name or business name of a virtual account should always match with the name of the Receiver specified when making payments to the Virtual account. Else such payments would be blocked. Therefore, kindly pass in the right details when requesting a virtual account.\n\nREQUEST BODY\n\n* * *\n\n| Field | Data type | Description |\n| --- | --- | --- |\n| currency | string | e.g EUR,GBP `required` |\n| accountType | string | The account type your customer wants. It should be either **individual** or **corporate** `required` |\n| KYCInformation | object | Verification of your customer Identity. See the tables below for KYC information for **Individual** and **Corporate** `required` |\n| meansOfId | file | Your means of identification from which should be a valid government ID e.g voters card, driving license .`Optional` for corporate virtual account . This should be a File Upload and not sent in Base64 format |\n| utilityBill | file | Electricity bills, water bills. `Optional` for corporate virtual account. This should be a File Upload and not sent in Base64 format |\n\n**Description of KYC Information Object for Individual**\n\n| Field | Data type | Description |\n| --- | --- | --- |\n| lastName | string | the last name of the individual `required` |\n| firstName | string | the first name of the individual `required` |\n| email | string | the email of the individual |\n| birthDate | dateFormat | YYYY-MM-DD `required` |\n| address | object | This contains all the required address information. They are:    \+ country: country of origin `required`  \+ zip `required`  \+ street `required`  \+ state `required`  \+ city `required` |\n| document | object | This contains the required information in your means of identification. They are:    \+ type: type of ID document e.g International Passport `required`  \+ number `required`  \+ issuedCountryCode e.g NG `required`  \+ issuedBy `required`  \+ issuedDate with Format \"YYYY-mm-dd\" `required`  \+ expirationDate with Format \"YYYY-mm-dd\" `optional` |\n| occupation | string | `required` |\n\n**Description of KYC Information Object for Corporate**\n\n| Field | Data type | Description |\n| --- | --- | --- |\n| businessName | string | `required` |\n| businessRegistrationNumber | string | `required` |\n| incorporationDate | string | `required` |\n| expectedInboundMonthlyTurnover | string | `required` |\n| website | string | `optional` |\n| email | string | `optional` |\n| address | string | This field is required and has the following fields:    \+ country: country of origin `required`  \+ zip `required`  \+ street `required`  \+ state `required`  \+ city `required` |\n| document | object | This field is required and has the following fields:    \+ type: type of ID document e.g International Passport `required`  \+ number `required`  \+ issuedCountryCode e.g NG `required`  \+ issuedBy `required`  \+ issuedDate with Format \"YYYY-mm-dd\" `required`  \+ expirationDate with Format \"YYYY-mm-dd\" `optional` |\n| ultimateBeneficialOwners | array of objects | This field is required and each object in it should contain the following fields:    \+ lastName `required`  \+ firstName `required`  \+ ownershipPercentage `required`  \+ politicallyExposedPerson `required` |\n| businessActivityDescription | string | `required` |\n| businessCategory | string | This is required for USD,GBP and EUR virtual accounts requests but `optional` for NGN e.g Government agencies, Joint Venture, Political parties |\n| additionalInfo | string | This is required for USD,GBP and EUR virtual account requests |\n| attachments | file | `optional` |

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.request_an_eu_rvirtual_account_for_a_subaccount(business_id, sub_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str business_id: The ID of the business (required)
        :param str sub_account_id: The ID of the subaccount (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id', 'sub_account_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_an_eu_rvirtual_account_for_a_subaccount" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'business_id' is set
        if ('business_id' not in params) or (params['business_id'] is None):
            raise ValueError("Missing the required parameter `business_id` when calling `request_an_eu_rvirtual_account_for_a_subaccount`")
        # verify the required parameter 'sub_account_id' is set
        if ('sub_account_id' not in params) or (params['sub_account_id'] is None):
            raise ValueError("Missing the required parameter `sub_account_id` when calling `request_an_eu_rvirtual_account_for_a_subaccount`")

        resource_path = '/profile/virtual-accounts/business/{businessId}/sub-accounts/{subAccountId}/requests'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'business_id' in params:
            path_params['businessId'] = params['business_id']
        if 'sub_account_id' in params:
            path_params['subAccountId'] = params['sub_account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_virtual_account_requests(self, **kwargs):
        """
        Get Virtual Account Requests
        This endpoint is used for getting all virtual account requests tied to a merchant

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_virtual_account_requests(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_virtual_account_requests" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/profile/virtual-accounts/requests'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def request_a_virtual_account(self, **kwargs):
        """
        Request A Virtual Account
        This endpoint is used for requesting a single virtual account or multiple virtual accounts for the same currency.\n\nREQUEST BODY\n\n* * *\n\n| Field | Data Type | Description |\n| --- | --- | --- |\n| currency | string | e.g GBP, EUR `required` for all currencies |\n| reason | number | This is `optional` for NGN |\n| monthlyVolume | string | This is `optional` for NGN |\n| entityName | string | This is `optional` for NGN |\n| KYCInformation | object | This is `optional` for NGN |\n\n**Description of KYC Information Object**\n\n| Field | Data type | Description |\n| --- | --- | --- |\n| businessCategory | string | `required` |\n| additionalInfo | string | `required` |

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.request_a_virtual_account(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_a_virtual_account" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/profile/virtual-accounts/requests'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_one_virtual_account(self, virtual_account_id, **kwargs):
        """
        Get One Virtual Account
        This endpoint is used for retreiving a virtual account attached to a merchant

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_one_virtual_account(virtual_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str virtual_account_id: The Id of the virtual account you want to retrieve (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['virtual_account_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_one_virtual_account" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'virtual_account_id' is set
        if ('virtual_account_id' not in params) or (params['virtual_account_id'] is None):
            raise ValueError("Missing the required parameter `virtual_account_id` when calling `get_one_virtual_account`")

        resource_path = '/profile/virtual-accounts/{virtualAccountId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'virtual_account_id' in params:
            path_params['virtualAccountId'] = params['virtual_account_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
